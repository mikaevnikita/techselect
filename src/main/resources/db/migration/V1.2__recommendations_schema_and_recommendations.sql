SET SCHEMA 'techselect';

create table if not exists recommendation (
    id bigint not null,
    text text not null,
    primary key (id)
);

insert into recommendation (id, text)
values (1, concat('У вас в команде имеются фронтенд разработчики.  ', chr(13),
           'В данном случае нет смысла использовать server-side технологии для построения пользовательского интерфейса, потому, что это отрицательно влияет на качество кода и повышает зависимость модулей.  ', chr(13),
           'Стройте свое приложение с помощью REST API и JSON, для построения пользовательского интерфейса используйте технологии, которыми владеют ваши фронтенд разработчики.  ', chr(13),
           'Для построения REST API используйте [Spring Web](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html), а для JSON – стандартную реализацию [Jackson](https://github.com/FasterXML/jackson-databind/wiki), используемую Spring.'));

insert into recommendation (id, text)
values (2, concat('У вас в команде нет фронтенд разработчиков, но пользовательский интерфейс строить необходимо.  ', chr(13),
           '**Рекомендация**: посмотрите в сторону [Spring MVC](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html) и [Thymeleaf](https://www.thymeleaf.org/) - если у вас есть верстальщики и дизайнеры, если их нет обратите внимание на [Vaadin](https://vaadin.com/).  ', chr(13),
           'Server-side технологии для построения UI отрицательно влияют на качество кода и повышают зависимость модулей, возможно вам стоит нанять фронтенд разработчиков ?'));

insert into recommendation (id, text)
values (3, concat('У вашей команды хороший опыт работы с реляционными **СУБД**, вероятно следует использовать их, есть несколько причин использовать **РСУБД**:  ', chr(13),
           '1.	Необходимость соответствия базы данных требованиям **ACID** (Atomicity, Consistency, Isolation, Durability — атомарность, непротиворечивость, изолированность, долговечность).  ', chr(13),
           'Это позволяет уменьшить вероятность неожиданного поведения системы и обеспечить целостность базы данных. Достигается подобное путём жёсткого определения того, как именно транзакции взаимодействуют с базой данных.  ', chr(13) ,
           'Это отличается от подхода, используемого в **NoSQL-базах**, которые ставят во главу угла гибкость и скорость, а не 100% консистентность данных.  ', chr(13),
           '2.	Данные, с которыми вы работаете, структурированы, при этом структура не подвержена частым изменениям.  ', chr(13),
           'Если ваша организация не находится в стадии экспоненциального роста, вероятно, не найдётся убедительных причин использовать БД, которая позволяет достаточно вольно обращаться с типами данных и нацелена на обработку огромных объёмов информации.  ', chr(13), chr(13),
           'Для взаимодействия с **РСУБД** следует использовать такие модули и библиотеки как:  ', chr(13),
            '* [JDBC](https://docs.oracle.com/javase/tutorial/jdbc/index.html)  ', chr(13),
            '* [Spring Data JPA](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/)  ', chr(13),
            '* [Hibernate](http://hibernate.org/)  ', chr(13),
            '* а также для миграций [Liquibase](https://www.liquibase.org/) или [Flyway](https://flywaydb.org/).'));

insert into recommendation (id, text)
values (4, concat('У вашей команды опыт работы с РСУБД либо низкий, либо отсутствует, посмотрите в сторону NO-SQL решений:  ', chr(13),
            '1.	Если есть подозрения, что база данных может стать узким местом проекта, основанного на работе с большими объёмами информации, стоит посмотреть в сторону NoSQL-баз, которые позволяют то, чего не умеют реляционные БД.  ', chr(13),
           '2.	Хранение больших объёмов неструктурированной информации. База данных NoSQL не накладывает ограничений на типы хранимых данных. Более того, при необходимости в процессе работы можно добавлять новые типы данных.  ', chr(13),
           '3.	Использование облачных вычислений и хранилищ. Облачные хранилища — отличное решение, но они требуют, чтобы данные можно было легко распределить между несколькими серверами для обеспечения масштабирования. Использование, для тестирования и разработки, локального оборудования, а затем перенос системы в облако, где она и работает — это именно то, для чего созданы NoSQL базы данных.  ', chr(13),
           '4.	Быстрая разработка. Если вы разрабатываете систему, используя agile-методы, или сроки вашего проекта достаточно сжатые, применение реляционной БД способно замедлить работу. NoSQL базы данных не нуждаются в том же объёме подготовительных действий, которые обычно нужны для реляционных баз.  ', chr(13),
           '5.	Порог входа в NoSQL базы ниже, чем в РСУБД.  ', chr(13),
           'Для построения взаимодействия с такими базами обратите внимание на такие модули Spring как:  ', chr(13),
            '* [Spring Data MongoDB](https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/)  ',
            '* [Spring Data Couchbase](https://spring.io/projects/spring-data-couchbase)  ',
            '* [Spring Data Redis](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/)  ',
            '* [Spring Data for Apache Cassandra](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/).'));

insert into recommendation (id, text)
values (5, concat('У вашей команды имеются компетенции по разработке микросервисов и у вашего приложения планируется сезонная нагрузка, следует разворачивать ваше приложение в облаке и разрабатывать его с использованием микросервисной архитектуры.  ', chr(13),
           'Микросервисы – легче масштабируются и поддаются изменениям, они более отказоустойчивы и данная архитектура больше отвечает современным тенденциям.'));

insert into recommendation (id, text)
values (6, concat('У вашей команды имеются компетенции по разработке микросервисов, однако у вашего приложения не планируется сезонная нагрузка, следует разрабатывать ваше приложение с использованием микросервисной архитектуры и разворачивать его не в облаке, особенно если у вас есть собственные сервера.  ', chr(13),
           'Это даст вам полный контроль над всеми этапами проекта, включая деплой и настройку серверов под ваши потребности.'));

insert into recommendation (id, text)
values (7, concat('У вашей команды нет компетенций по разработке микросервисов и не планируется сезонная нагрузка, следует разрабатывать монолит с последующим развертыванием не в облаке.  ', chr(13),
           'Это сэкономит вам множество ресурсов и разработка на старте проекта будет максимально простой и продуктивной, при дальнейшем развитии проекта, возможно потребуется добавлять новый функционал в виде микросервисов,  ', chr(13),
           'для этого вашей команде потребуется обрести новые компетенции, но так ваш проект будет больше соответствовать современным тенденциям.  ', chr(13),
           'Уделите пристальное внимание горизонтальной масштабируемости вашего проекта.'));

insert into recommendation (id, text)
values (8, concat('У вашей команды нет компетенций по разработке микросервисов, однако у вашего приложения планируется сезонная нагрузка, следует разрабатывать монолит с последующим развертыванием в облаке.  ', chr(13),
           'Это сэкономит вам множество ресурсов и разработка на старте проекта будет максимально простой и продуктивной, при дальнейшем развитии проекта, возможно потребуется добавлять новый функционал в виде микросервисов,  ', chr(13),
           'для этого вашей команде потребуется обрести новые компетенции, но так ваш проект будет больше соответствовать современным тенденциям.'));

insert into recommendation (id, text)
values (9, concat('Для того, чтобы обеспечить горизонтальную масштабируемость системы - следует обратить внимание на синхронизацию шедулеров (задач по расписанию), обычно при масштабировании систем,  которые до этого не масштабировались, это является узким местом.  ', chr(13),
           'В данном случае вам поможет такая библиотека как [Schedlock](https://github.com/lukas-krecan/ShedLock). Кроме задач по расписанию, проблемы могут наблюдаться в области продолжительных или критично важных частей бизнес-кода, где важно, чтобы эта часть кода исполнялась в один момент времени, не более чем одним узлом (нодой).  ', chr(13),
           'В таком случае вам необходимо синхронизировать доступ к таким секциям с помощью распределенных блокировок, например вы можете развернуть одну ноду Redis и использовать библиотеку [Redisson](https://github.com/redisson/redisson), она уже содержит в себе различные распределенные структуры данных и классы, обеспечивающие распределенную блокировку.  ', chr(13),
           'В случае, если ваша система должна масштабироваться динамически под нагрузкой, вам следует обратить внимание на [Kubernetes](https://kubernetes.io/) – это открытое программное обеспечение для автоматизации развёртывания, масштабирования контейнеризированных приложений и управления ими.  ', chr(13),
           'К приложениям, которые должны динамически масштабироваться предъявляются особые требования, а именно – они должны удовлетворять [12 факторам Heroku](https://12factor.net/ru/).'));

insert into recommendation (id, text)
values (10, concat('Стандартным решением для обеспечения функционала авторизации, регистрации и аутентификации в стеке Spring является модуль [Spring Security](https://spring.io/projects/spring-security).  ', chr(13),
            'Spring Security - это инфраструктура, которая фокусируется на предоставлении аутентификации и авторизации приложениям Java.  ', chr(13),
            'Как и во всех проектах Spring, реальная сила Spring Security заключается в том, насколько легко его можно расширить в соответствии с индивидуальными требованиями.  ', chr(13),
            'Однако в чистом виде Spring Security обычно не используется, в основном его используют вместе с такими модулями как Spring Security LDAP (в случае, если у вас авторизация вынесена на уровень LDAP) или вместе с Keycloak или другим Identity Provider’ом.  ', chr(13), chr(13),
            '[Keycloak](https://www.keycloak.org/) - это продукт с открытым исходным кодом, предназначенный для идентификации и контроля доступа и поддерживаемый компанией RedHat. Он является основой для продуктов многих компаний использующих SSO.  ', chr(13), chr(13),
            'SSO -  это средство аутентификации, позволяющее пользователям осуществлять доступ к нескольким приложениям с помощью одного набора учетных данных. Обычно организации используют технологию единого входа для упрощения доступа к различным приложениям на стороне потребителя, веб- и облачным приложениям с целью повышения комфортности работы пользователей. Она также может предоставить ИТ-отделу расширенный контроль пользовательского доступа, сократить число обращений в службу поддержки в связи с паролями, а также улучшить безопасность и соответствие стандартам.  ', chr(13), chr(13),
            '**Рекомендация**: используйте Spring Security вместе с Keycloak, в данном случае ваш бизнес код будет чист, приложения будут масштабируемы и нагрузка связанная с аутентификацией, авторизацией и регистрацией не будет лежать на основных бизнес базах данных, при появлении новых продуктов вы сможете использовать технологию единого входа, переиспользуя учетные записи, а также вы сможете подключать LDAP к вашим проектам, без необходимости дорабатывать исходный код проектов.'));

insert into recommendation (id, text)
values (11, concat('Spring по умолчанию использует для логгирования Sl4j, это библиотека для протоколирования, ставящая своей целью предоставить максимально простой, но при этом мощный фасад для различных систем протоколирования на Java.  ', chr(13),
            'SLF4J предоставляет простой обобщённый интерфейс для систем протоколирования, не зависящий от конкретной реализации.  ', chr(13),
            'Менять реализацию не требуется. Ранее необходимо было писать логи в файлы, затем необходим был компонент, который собирал бы логи с машин, это тяжеловесная архитектура со множеством недостатков.  ', chr(13),
            '**Рекомендуется** использовать Sl4j как стандартный компонент в интеграции с ELK и Filebeat.  ', chr(13),
            'ELK – это от трех продуктов с открытым исходным кодом: Elasticsearch, Logstash, и Kibana.  ', chr(13),
            'Elasticsearch это поисковый и аналитический движок. Logstash это server side data processing pipeline, который собирает данные со множества источников, затем преобразует их, и затем отправляет в Elasticsearch. Kibana позволяет пользователям визуализировать данные.  ', chr(13),
            'Filebeat транслирует на сервер информацию из динамических обновляемых журналов системы и файлов, содержащих текстовую информацию.  ', chr(13),
            'Есть несколько подходов при построении архитектуры логгирования:  ', chr(13),
            '1.	Сервисы сами накапливают, а затем отправляют свои логи в Logstash.  ', chr(13),
            '2.	Сервисы накапливают логи, а Logstash их собирает.  ', chr(13),
            '3.	Сервисы накапливают логи, а Filebeat их собирает и отправляет в Logstash.  ', chr(13),
            '4.	Сервисы ничего не накапливают, а просто пишут логи в стандартный поток вывода и поток ошибок (stdout и stderr), Filebeat просто собирает их централизованно с хоста, подготоваливает их в удобный для пересылки и обработки вид – и отправляет в Logstash.  ', chr(13), chr(13),
            '**Рекомендация**: использовать последний подход, это позволит снять нагрузку и заботу о логгировании с сервисов, не придется менять кодовую базу, будет снята нагрузка с Logstash. Это самый современный и наиболее правильный подход.'));

insert into recommendation (id, text)
values (12, concat('Характер ваших интеграций синхронный, используйте [Spring Cloud OpenFeign](https://spring.io/projects/spring-cloud-openfeign).  ', chr(13),
            'Feign – это решение изначально разработанное компанией Netflix, это декларативный REST клиент, отлично интегрированный с Client-side балансировщиком нагрузки – [Ribbon](https://github.com/Netflix/ribbon),  ', chr(13),
            'и который вписывается во все типичные инфраструктуры, будь то облачная, Kubernetes или инфраструктура с использованием [Netflix OSS](https://spring.io/projects/spring-cloud-netflix), или вообще статичная – в которой адреса сервисов “зашиты.'));

insert into recommendation (id, text)
values (13, concat('При большом количестве интеграций и event-driven архитектуре – используйте [Apache Camel with Spring](https://camel.apache.org/camel-spring-boot/latest/index.html).  ', chr(13),
            '[Apache Camel](https://camel.apache.org/) –  открытый кроссплатформенный java-фреймворк, который позволяет проводить интеграцию приложений в простой и понятной форме.  ', chr(13),
            'Идеологически основан на Шаблонах Интеграции Корпоративных Приложений.  ', chr(13),
            'В случае, если в вашей системе много конкурентного кода, обратите внимание на реактивный стек – [Spring Web Flux](https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html) или [Spring Reactor](https://projectreactor.io/), или же на [ZeroMQ](https://zeromq.org/). '));

insert into recommendation (id, text)
values (14, concat('У вас планируются асинхронные интеграции, для построения подобных систем следует использовать интеграции с помощью брокера сообщений, например [RabbitMQ](https://www.rabbitmq.com/).  ', chr(13),
            'Интеграция с помощью MQ обеспечит вам персистентность сообщений, восстановление системы после сбоев – система продолжит обрабатывать все посланные сообщения или просто повторит их незавершившуюся во время падения системы обработку.  ', chr(13),
            'RabbitMQ – наиболее простое и популярное решение, которое позволит вам быть независимым от языка программирования и получить при этом простоту развертывания, сопровождения и предсказуемое поведение системы.  ', chr(13),
            'Для работы с RabbitMQ стек Spring предоставляет модуль – [Spring AMQP](https://spring.io/projects/spring-amqp).'));

insert into recommendation (id, text)
values (15, 'Будет ли система являться корпоративным приложением с фиксированным числом пользователей - Нет');

insert into recommendation (id, text)
values (16, concat('Обеспечить отказоустойчивость системы можно с помощью таких паттернов как:  ', chr(13),
            '* Circuit Breaker  ', chr(13),
            '* Rate Limiting  ', chr(13),
            '* Bulkhead  ', chr(13),
            '* Retry  ', chr(13), chr(13),
            'Ранее для подобных решений использовалась библиотека Hystrix и такие библиотеки как Spring Cloud Circuit Breaker.  ', chr(13),
            'В ноябре 2018 года, поддержка Netflix Hystrix была прекращена.  ', chr(13),
            'Используйте библиотеку [Resilience4j](https://resilience4j.readme.io/).  ', chr(13),
            'Resilience4j – это легковесная библиотека отказоустойчивости вдохновленная Netflix Hystrix, но спроектированная в стиле функционального программирования.  ', chr(13),
            'Resilience4j предоставляет функции высокого уровня (декораторы) для улучшения любого функционального интерфейса, лямбда выражения или метода с помощью таких паттернов как Circuit Breaker, Rate Limiter, Retry или Bulkhead.  ', chr(13),
            'Вы можете компоновать более чем один декоратор, так как вам удобно.  ', chr(13),
            'Данная библиотека предоставляет стартер для Spring Boot – [resilience4j-spring-boot](https://resilience4j.readme.io/docs/getting-started-3).'));

insert into recommendation (id, text)
values (17, concat('[Приложение двенадцати факторов](https://12factor.net/ru) — это методология для создания SaaS-приложений, которые:  ', chr(13),
            '* Используют декларативный формат для описания процесса установки и настройки, что сводит к минимуму затраты времени и ресурсов для новых разработчиков, подключённых к проекту', chr(13),
            '* Имеют соглашение с операционной системой, предполагающее максимальную переносимость между средами выполнения', chr(13),
            '* Подходят для развёртывания на современных облачных платформах, устраняя необходимость в серверах и системном администрировании  ', chr(13),
            '* Сводят к минимуму расхождения между средой разработки и средой выполнения, что позволяет использовать непрерывное развёртывание (continuous deployment) для максимальной гибкости  ', chr(13),
            '* И могут масштабироваться без существенных изменений в инструментах, архитектуре и практике разработки.'));